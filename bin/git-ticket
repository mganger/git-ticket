#!/usr/bin/python2

import re
import yaml
from hashlib import sha256
import tempfile
import subprocess
import os
import json
import gitticket as gt

if gt.command  == 'init':
	repo = gt.active_repo
	#Use project name
	assert gt.subject[0] != '', 'git-ticket init <project-name>'

	#Create new branch with name ticket-PROJECT
	project = gt.subject[0].upper()

	#SHA is empty commit
	#TODO assert project doesn't already exist
	with open(os.devnull, 'wb') as devnull:
		try:
			past_branch = gt.current_branch

			subprocess.check_call(["git checkout --orphan ticket-{}"].format(project),stdout=devnull,stderr=subprocess.STDOUT)
			os.system("git clean -fdx")
			os.system("git reset")

			open(project, 'w').write(project+'\n').close()
			with open('.ticket', 'w') as file:
				json.dump([],file)

			os.system("git add {} .ticket".format(project))
			os.system('git commit -m "Inital commit of ticket-{} branch"'.format(project))
			os.system('git-ticket project {}'.format(project))

			print "Initialized project {}".format(project)

		except:
			print "Couldn't initialize branch. Does it already exist?"
		finally:
			try: subprocess.check_call(["git checkout {}".format(past_branch)], stdout=devnull)
			except: pass
			#TODO add commit hook to folder (.git/hooks/commit-msg)
			gt.exit(0)


if gt.command == 'project':
	if gt.subject[0] == None:
		print 'git project <project-name>'
	#Check for project branch
	#Write the project to .git/current_project
	gt.open_in_dir('.git/current_project','w').write(gt.subject[0].upper())

elif gt.command == 'new':
	#Get a tmp file and do the whole git commit thing
	#Parse the ticket for (use yaml):
	#	title
	#	assignee       (default current)
	#	start-date     (default today)
	#	due-date       (optional)
	#	type           (default feature, else hotfix, support)
	#	state          (default open)
	#	comments
	info = []
	with tempfile.NamedTemporaryFile() as msg:
		msg.write(gt.commit_msg)
		msg.seek(0)
		os.system("vim {}".format(msg.name))
		msg.seek(0)
		info = yaml.safe_load(msg)
	#defaults
	if info['state'] is None:
		info['state'] = 'open'


	#Error checking
	if info['title'] is None:
		print 'Abort new ticket'
		exit(1)
	if info['type'] not in {'feature', 'hotfix', 'release', 'support'}:
		print 'Invalid type'
		exit(2)
	if info['state'] not in {'open', 'closed', 'in-progress', 'invalid', 'hold'}:
		print 'Invalid state'

	#Hash
	info['hash'] = sha256(info['title']).hexdigest()

	#Change branches

	#Load current tickets from file
	ticks = gt.get_tickets()

	for ticket in ticks:
		 if ticket['hash'] == info['hash']:
			print 'Ticket already exists'
			exit(1)

	ticks.append(info)

	#Save the file to tickets directory
	gt.write_tickets(ticks)

	repo.index.add(['.ticket'])
	repo.index.commit('Added [{}-{}]'.format(project(), info['hash'][:6]))
	gt.push()

	#show the ticket
	gt.print_ticket_header()
	gt.print_ticket(info)


elif gt.command == 'list':   gt.list.show_list()
elif gt.command == 'start':  gt.start.start()
elif gt.command == 'finish': gt.start.finish()
elif gt.command == 'show':   gt.show.show()
elif gt.command in {'closed', 'invalid', 'open', 'in-progress'}: gt.state.modify(gt.command)
else:
	print "git-ticket"
